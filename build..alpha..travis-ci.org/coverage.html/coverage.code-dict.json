{"/home/travis/build/npmtest/node-npmtest-connect-modrewrite/test.js":"/* istanbul instrument in package npmtest_connect_modrewrite */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-connect-modrewrite/lib.npmtest_connect_modrewrite.js":"/* istanbul instrument in package npmtest_connect_modrewrite */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_connect_modrewrite = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_connect_modrewrite = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-connect-modrewrite/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-connect-modrewrite && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_connect_modrewrite */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_connect_modrewrite\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_connect_modrewrite.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_connect_modrewrite.rollup.js'] =\n            local.assetsDict['/assets.npmtest_connect_modrewrite.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_connect_modrewrite.__dirname + '/lib.npmtest_connect_modrewrite.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-connect-modrewrite/node_modules/connect-modrewrite/index.js":"\n/**\n * Module dependencies\n */\n\nvar url = require('url');\nvar qs = require('qs');\nvar httpReq = require('http').request;\nvar httpsReq = require('https').request;\nvar defaultVia = '1.1 ' + require('os').hostname();\n\n/**\n * Syntaxes\n */\n\nvar noCaseSyntax = /NC/;\nvar lastSyntax = /L/;\nvar proxySyntax = /P/;\nvar redirectSyntax = /R=?(\\d+)?/;\nvar forbiddenSyntax = /F/;\nvar goneSyntax = /G/;\nvar typeSyntax = /T=([\\w|\\/]+,?)/;\nvar hostSyntax =  /H=([^,]+)/;\nvar flagSyntax = /\\[([^\\]]+)]$/;\nvar partsSyntax = /\\s+|\\t+/g;\nvar httpsSyntax = /^https/;\nvar querySyntax = /\\?(.*)/;\n\n/**\n * Export `API`\n */\n\nmodule.exports = function(rules) {\n  // Parse the rules to get flags, replace and match pattern\n  rules = _parse(rules);\n\n  return function(req, res, next) {\n    var protocol = req.connection.encrypted || req.headers['x-forwarded-proto'] === 'https' ? 'https' : 'http';\n    var callNext = true;\n\n    rules.some(function(rule) {\n\n      if(rule.host) {\n        if(!rule.host.test(req.headers.host)) {\n          return false;\n        }\n      }\n\n      var location;\n      if(/\\:\\/\\//.test(rule.replace)) {\n        location = req.url.replace(rule.regexp, rule.replace);\n      }\n      else {\n        location = protocol + '://' + req.headers.host + req.url.replace(rule.regexp, rule.replace);\n      }\n\n      var match = rule.regexp.test(req.url);\n\n      // If not match\n      if(!match) {\n        // Inverted rewrite\n        if(rule.inverted) {\n          req.url = rule.replace;\n          return rule.last;\n        }\n\n        return false;\n      }\n\n      // Type\n      if(rule.type) {\n        res.setHeader('Content-Type', rule.type);\n      }\n\n      // Gone\n      if(rule.gone) {\n        res.writeHead(410);\n        res.end();\n        callNext = false;\n        return true;\n      }\n\n      // Forbidden\n      if(rule.forbidden) {\n        res.writeHead(403);\n        res.end();\n        callNext = false;\n        return true;\n      }\n\n      // Proxy\n      if(rule.proxy) {\n        _proxy(rule, {\n          protocol : protocol,\n          req : req,\n          res : res,\n          next : next\n        });\n        callNext = false;\n        return true;\n      }\n\n      // Redirect\n      if(rule.redirect) {\n        res.writeHead(rule.redirect, {\n          Location : location\n        });\n        res.end();\n        callNext = false;\n        return true;\n      }\n\n      // Rewrite\n      if(!rule.inverted) {\n        if (rule.replace !== '-') {\n          req.url = req.url.replace(rule.regexp, rule.replace);\n        }\n        return rule.last;\n      }\n    });\n\n    // Add to query object\n    var queryValue = querySyntax.exec(req.url);\n    if(queryValue) {\n      req.params = req.query = qs.parse(queryValue[1]);\n    }\n\n    if(callNext) {\n      next();\n    }\n\n  };\n};\n\n/**\n * Get flags from rule rules\n *\n * @param {Array.<rules>} rules\n * @return {Object}\n * @api private\n */\n\nfunction _parse(rules) {\n  return (rules || []).map(function(rule) {\n    // Reset all regular expression indexes\n    lastSyntax.lastIndex = 0;\n    proxySyntax.lastIndex = 0;\n    redirectSyntax.lastIndex = 0;\n    forbiddenSyntax.lastIndex = 0;\n    goneSyntax.lastIndex = 0;\n    typeSyntax.lastIndex = 0;\n    hostSyntax.lastIndex = 0;\n\n    var parts = rule.replace(partsSyntax, ' ').split(' '), flags = '';\n\n    if(flagSyntax.test(rule)) {\n      flags = flagSyntax.exec(rule)[1];\n    }\n\n    // Check inverted urls\n    var inverted = parts[0].substr(0, 1) === '!';\n    if(inverted) {\n      parts[0] = parts[0].substr(1);\n    }\n\n    var redirectValue = redirectSyntax.exec(flags);\n    var typeValue = typeSyntax.exec(flags);\n    var hostValue = hostSyntax.exec(flags);\n\n    return {\n      regexp: typeof parts[2] !== 'undefined' && noCaseSyntax.test(flags) ? new RegExp(parts[0], 'i') : new RegExp(parts[0]),\n      replace: parts[1],\n      inverted: inverted,\n      last: lastSyntax.test(flags),\n      proxy: proxySyntax.test(flags),\n      redirect: redirectValue ? (typeof redirectValue[1] !== 'undefined' ? redirectValue[1] : 301) : false,\n      forbidden: forbiddenSyntax.test(flags),\n      gone: goneSyntax.test(flags),\n      type: typeValue ? (typeof typeValue[1] !== 'undefined' ? typeValue[1] : 'text/plain') : false,\n      host: hostValue ? new RegExp(hostValue[1]) : false\n    };\n  });\n}\n\n/**\n * Proxy the request\n *\n * @param {Object} rule\n * @param {Object} metas\n * @return {void}\n * @api private\n */\n\nfunction _proxy(rule, metas) {\n  var opts = _getRequestOpts(metas.req, rule);\n  var request = httpsSyntax.test(rule.replace) ? httpsReq : httpReq;\n\n  var pipe = request(opts, function (res) {\n    res.headers.via = opts.headers.via;\n    metas.res.writeHead(res.statusCode, res.headers);\n    res.on('error', function (err) {\n      metas.next(err);\n    });\n    res.pipe(metas.res);\n  });\n\n  pipe.on('error', function (err) {\n    metas.next(err);\n  });\n\n  if(!metas.req.readable) {\n    pipe.end();\n  } else {\n    metas.req.pipe(pipe);\n  }\n}\n\n/**\n * Get request options\n *\n * @param {HTTPRequest} req\n * @param {Object} rule\n * @return {Object}\n * @api private\n */\n\nfunction _getRequestOpts(req, rule) {\n  var opts = url.parse(req.url.replace(rule.regexp, rule.replace), true);\n  var query = (opts.search != null) ? opts.search : '';\n\n  if(query) {\n    opts.path = opts.pathname + query;\n  }\n  opts.method  = req.method;\n  opts.headers = req.headers;\n  opts.agent = false;\n  opts.rejectUnauthorized = false;\n  opts.requestCert = false;\n  var via = defaultVia;\n  if(req.headers.via) {\n    via = req.headers.via + ', ' + via;\n  }\n  opts.headers.via = via;\n\n  delete opts.headers['host'];\n\n  return opts;\n}\n","/home/travis/build/npmtest/node-npmtest-connect-modrewrite/node_modules/connect-modrewrite/Gruntfile.js":"\nvar jshintGlobals = require('jshint-globals');\n\nmodule.exports = function(grunt) {\n  // Project configuration.\n  grunt.initConfig({\n\n    jshint: {\n      options: {\n        es5 : false,\n        strict : false,\n        curly : false,\n        eqeqeq : true,\n        loopfunc : true,\n        forin : false,\n        immed : true,\n        latedef : true,\n        newcap : true,\n        noarg : true,\n        sub : true,\n        undef : true,\n        boss : true,\n        eqnull : true,\n        node : true,\n        supernew : true,\n        laxbreak : true,\n        expr : true,\n        laxcomma : true,\n        unused : true,\n        latedef : false,\n        globals: jshintGlobals({\n          mocha : jshintGlobals.mocha\n        })\n      },\n\n      files: [\n        'index.js',\n        'test/**/*.js'\n      ]\n    }\n  });\n\n  // Load plugins\n  grunt.loadNpmTasks('grunt-contrib-jshint');\n};\n"}